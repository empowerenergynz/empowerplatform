name: 'Linting & Testing'
on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-22.04
    env:
      ALGOLIA_SECRET: ${{ secrets.ALGOLIA_SECRET }}
      COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
      CYPRESS_BASE_URL: 'http://localhost:8000'
      MIX_GOOGLEPLACES_API_KEY: ${{ secrets.MIX_GOOGLEPLACES_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure App
        run: cp .env.ci.example .env
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, bcmath, curl, libxml, gettext, exif, iconv, intl, mbstring, gd, imagick, soap, sockets, zip, pcntl, pdo, pgsql, pdo_pgsql
          coverage: pcov
      - name: Get composer cache directory
        id: composercache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock, vendor/**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Backend Dependencies
        run: composer install --no-progress --no-scripts --prefer-dist --optimize-autoloader
      - name: Cache node modules
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Installing npm packages
        run: npm ci --legacy-peer-deps
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('docker-compose.ci.yaml') }}
      - name: Start services
        run: docker compose -f docker-compose.ci.yml up -d
      - name: Linting code
        run: npm run lint
      - name: Generate application key
        run: php artisan key:generate
      - name: Compiling frontend code
        run: npm run dev
      - name: Run Backend Tests
        run: npm run phpunit:coverage
      - name: Check backend test coverage
        uses: johanvanhelden/gha-clover-test-coverage-check@v1
        with:
          percentage: '70'
          filename: 'coverage/phpunit/clover.xml'
      - name: Jest
        run: npm run jest -- --coverage
      - name: Check frontend test coverage
        uses: johanvanhelden/gha-clover-test-coverage-check@v1
        with:
          percentage: '60'
          filename: 'coverage/jest/clover.xml'
      - name: Update Algolia config
        run: npm run algolia:config:sync
      - name: Run e2e tests
        run: npm run test:e2e
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots/
      - name: Upload Laravel logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: laravel-logs
          path: storage/logs/
      - name: Stop services
        run: docker compose down
